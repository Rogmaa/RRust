use std::io;

type CalcInt = i64;

struct ParseState {
    line: String,
    index: usize,
}

fn LinetoIndex(ps: &ParseState) -> char {
    ps.line.as_bytes()[ps.index - 1] as char
}

fn error(msg: String) {
    eprint!("error: {}", msg);
    ::std::process::exit(1);
}

fn lex_match(ps: &mut ParseState, expected: char) {
    if LinetoIndex(ps) == expected {
        ps.index += 1;
        return;
    }

    error(format!("error Abgleich {} an index {}", expected, ps.index));
}

fn scan_digits(ps: &mut ParseState) -> CalcInt {
    const BASE: CalcInt = 10;
    let mut val = 0;

    loop {
        let digit: CalcInt;
        match LinetoIndex(ps) {
            '0'..='9' => digit = LinetoIndex(ps).to_digit(10).unwrap() as CalcInt,
            _ => break,
        }
        if digit >= BASE {
            error(format!("Zahl {} auÃŸerhalb der Reichweite der Basis{}", digit, BASE));
        }

        if val > (std::i64::MAX - digit) / BASE {
            error(format!("Integer overflow"));
        }

        val = val * BASE + digit;
        ps.index += 1;
    }

    val
}

fn factor(ps: &mut ParseState) -> CalcInt {
    let value: CalcInt;

    if LinetoIndex(ps) == '(' {
        lex_match(ps, '(');
        value = expr(ps);
        lex_match(ps, ')');

    } else if LinetoIndex(ps).is_digit(10) || LinetoIndex(ps) == '+' || LinetoIndex(ps) == '-' {
        value = scan_digits(ps);

    } else {
        value = 0;
        error("Schlechter Operand".to_string());
    }

    value
}

fn term(ps: &mut ParseState) -> CalcInt {
    let mut value: CalcInt = factor(ps);

    while LinetoIndex(ps) == '*' || LinetoIndex(ps) == '/' {
        match LinetoIndex(ps) {
            '*' => {
                lex_match(ps, '*');
                value *= factor(ps);
            }

            '/' => {
                lex_match(ps, '/');
                value /= factor(ps);
            }

            _ => {}
        }
    }

    value
}

fn expr(ps: &mut ParseState) -> CalcInt {
    let mut value: CalcInt = term(ps);

    while LinetoIndex(ps) == '+' || LinetoIndex(ps) == '-' {
        match LinetoIndex(ps) {
            '+' => {
                lex_match(ps, '+');
                value += term(ps);
            }
            '-' => {
                lex_match(ps, '-');
                value -= term(ps);
            }
            _ => {}
        }
    }

    value
}

fn main() {
    let mut ps = ParseState {
        line: String::new(),
        index: 1,
    };

    println!("expr:\n\t");

    match io::stdin().read_line(&mut ps.line) {
        Ok(_n) => {
            let result = expr(&mut ps);
            println!("Ergebnis: {}", result);
        }

        Err(e) => print_error(format!("error: {}", e)),
    }
}

fn print_error(msg: String) {
    eprint!("{}", msg);
    ::std::process::exit(1);
}
